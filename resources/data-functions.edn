[
 {:db/id #db/id [:db.part/user]
  :db/ident :fn/replace-to-many
  :db/doc "Given an entity e, a to-many attribute, and a list of new values, yields a transaction that replaces the old values by new ones"
  :db/fn #db/fn {:lang "clojure"
                 :params [db eid attr new-vals]
                 :code (let [old-vals (d/q '[:find [?t ...]
                                             :in $ ?to-many-attr ?e
                                             :where [?e ?to-many-attr ?t]]
                                           db attr eid)
                             to-remove (remove (set (seq new-vals)) old-vals)]
                         (concat
                           (for [rv to-remove] [:db/retract eid attr rv])
                           (for [nv new-vals] [:db/add eid attr nv])))}}
 {:db/id #db/id [:db.part/user]
  :db/ident :fn/upsert-rev-stream
  :db/doc "The primary key of rev-stream is compound key"
  :db/fn #db/fn
  {:lang :clojure
   :params [db m]
   :code (if-let [id (ffirst
                      (d/q '[:find ?e
                             :in $ ?u ?t ?s
                             :where
                             [?e :rev-stream/stream-unique-id ?u]
                             [?e :rev-stream/writing-time ?t]
                             [?e :rev-stream/source ?s]]
                           db (:rev-stream/stream-unique-id m)
                           (:rev-stream/writing-time m)
                           (:rev-stream/source m)))]
           [(-> (dissoc m :rev-stream/stream-unique-id
                        :rev-stream/writing-time
                        :rev-stream/source)
                (assoc :db/id id))]
           [m])}}
 {:db/id #db/id [:db.part/user]
  :db/ident :fn/upsert-order
  :db/doc "The :order/accounting-data is cardinality many.
  When insert semantic, transact `[m]`
  When update semantic, do retraction of :order/accounting-data first and then transact `m`  "
  :db/fn #db/fn
  {:lang :clojure
   :params [db m]
   :code (if-let [eid (ffirst
                      (d/q '[:find ?e
                             :in $ ?u
                             :where
                             [?e :order/product-unique-id ?u]]
                           db (:order/product-unique-id m)))]
           (let [ad-refs (d/q '[:find [?a ...]
                                :in $ ?e
                                :where [?e :order/accounting-data ?a]]
                              db eid)
                 retracts (mapcat (fn [r]  [[:db/retractEntity r]
                                            [:db/retract eid :order/accounting-data r]]) ad-refs)]
             (conj (vec retracts) m))
           [m])}}
 {:db/id #db/id [:db.part/user]
  :db/ident :fn/upsert-target
  :db/doc "The primary key of target is compound key (year-quarterly, user)"
  :db/fn #db/fn
  {:lang :clojure
   :params [db m]
   :code (if-let [id (d/q '[:find ?e .
                            :in $ ?q ?u
                            :where
                            [?e :target/year-quarterly ?q]
                            [?e :target/user ?u]]
                           db (:target/year-quarterly m)
                           (:target/user m))]
           [(-> (dissoc m :target/year-quarterly
                        :target/user)
                (assoc :db/id id))]
           [m])}}
]
